#!/bin/zsh

# Login to lxplus
# ===============
#
# Login to CERN's lxplus server. You can login to either the first available
# node or to a specific node (which is useful if you have a screen session
# running on that node, as screen sessions cannot be accessed from other nodes).


# Script name
sname=${0##*/}

# Help message
show_help() {
cat <<EOF
usage: ${sname} [--help] [-X] [NODE]

Login to CERN's lxplus server. You can login to either the first available
node or to a specific node (which is useful if you have a screen session
running on that node, as screen sessions cannot be accessed from other nodes).

optional arguments:
  -X           Enable X11 forwarding (i.e. use ssh -X)
  NODE         Login to this lxplus node (e.g. 001, 002, etc.)
  -h, --help   Show this help message and exit
EOF
}


# ----- Parse input arguments -----#

POSITIONAL=()  # Array to store positional arguments

USE_X11=false

while (( $# > 0 )); do
    opt="$1"

    case $opt in
        -h|--help)
            show_help
            exit 0
            ;;
        -X)
            USE_X11=true
            shift
            ;;
        *)
            POSITIONAL+=("$1")
            shift
            ;;
    esac
done

set -- "${POSITIONAL[@]}"  # Restore positional parameters

# Parse arguments and get arg count
node=$1
argc=$#


# Get username from scripts repository
USER="$( cd "$( dirname "${(%):-%N}" )" && cat $(pwd)/.username )"


# Check if Kerberos ticket exists
echo "Checking Kerberos tickets..."
klist
k_code=$?  # Return code; 0 if all good, 1 if no ticket

if (( $k_code == 1 )); then
    echo "Enter Kerberos credentials:"
    init-krb
fi


# Get login path
if [[ -z $node ]]; then
    # No node given, let lxplus decide
    login_path="${USER}@lxplus.cern.ch"
else
    # Login to the specific node
    login_path="${USER}@lxplus${node}.cern.ch"
fi

# Login (with or without X11 forwarding)
if [[ $USE_X11 = true ]]; then
    echo ">>> ssh -X ${login_path}"
    ssh -X ${login_path}
else
    echo ">>> ssh ${login_path}"
    ssh ${login_path}
fi
